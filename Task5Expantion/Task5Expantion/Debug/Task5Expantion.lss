
Task5Expantion.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000060a  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80002800  80002800  00002c00  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       000001a8  80002a00  80002a00  00002e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  6 .data         00000004  00000008  80002ba8  00003008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .balign       00000004  0000000c  80002bac  0000300c  2**0
                  ALLOC
  8 .bss          000000f0  00000010  00000010  00000000  2**2
                  ALLOC
  9 .heap         0000ef00  00000100  00000100  00000000  2**0
                  ALLOC
 10 .comment      00000030  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 11 .debug_aranges 000004d8  00000000  00000000  00003040  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubnames 00000a3c  00000000  00000000  00003518  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   00009ab1  00000000  00000000  00003f54  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00001515  00000000  00000000  0000da05  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000571b  00000000  00000000  0000ef1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000009dc  00000000  00000000  00014638  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00001ff7  00000000  00000000  00015014  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    000016a5  00000000  00000000  0001700b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macinfo 00936f95  00000000  00000000  000186b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 21 .debug_ranges 00000450  00000000  00000000  0094f648  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:

  .global _start
  .type _start, @function
_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80000000:	fe cf db 28 	sub	pc,pc,-9432

80000004 <_trampoline>:
80000004:	e0 8f 10 00 	bral	80002004 <program_start>
	...

80002004 <program_start>:
  rjmp    program_start

  .org  PROGRAM_START_OFFSET
program_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80002004:	fe cf fb 2c 	sub	pc,pc,-1236

Disassembly of section .text:

80002008 <adc_configure>:
80002008:	78 18       	ld.w	r8,r12[0x4]
8000200a:	ea 18 0f 00 	orh	r8,0xf00
	adc->mr |= 1 << AVR32_ADC_LOWRES_OFFSET;
#endif

	/* Set Sample/Hold time to max so that the ADC capacitor should be
	 * loaded entirely */
	adc->mr |= 0xF << AVR32_ADC_SHTIM_OFFSET;
8000200e:	99 18       	st.w	r12[0x4],r8

	/* Set Startup to max so that the ADC capacitor should be loaded
	 * entirely */
	adc->mr |= 0x1F << AVR32_ADC_STARTUP_OFFSET;
80002010:	78 18       	ld.w	r8,r12[0x4]
80002012:	ea 18 00 1f 	orh	r8,0x1f
80002016:	99 18       	st.w	r12[0x4],r8
}
80002018:	5e fc       	retal	r12

8000201a <adc_start>:
void adc_start(volatile avr32_adc_t *adc)
{
	Assert( adc != NULL );

	/* start conversion */
	adc->cr = AVR32_ADC_START_MASK;
8000201a:	30 28       	mov	r8,2
8000201c:	99 08       	st.w	r12[0x0],r8
}
8000201e:	5e fc       	retal	r12

80002020 <adc_enable>:
	Assert( adc != NULL );
	Assert( channel <= AVR32_ADC_CHANNELS_MSB ); /* check if channel exist
	                                              **/

	/* enable channel */
	adc->cher = (1 << channel);
80002020:	30 18       	mov	r8,1
80002022:	f0 0b 09 48 	lsl	r8,r8,r11
80002026:	99 48       	st.w	r12[0x10],r8
}
80002028:	5e fc       	retal	r12

8000202a <sysclk_init>:

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = true;
#endif
}
8000202a:	5e fc       	retal	r12

8000202c <pwm_channel_init>:

int pwm_channel_init( unsigned int channel_id, const avr32_pwm_channel_t *pwm_channel)
{
  volatile avr32_pwm_t *pwm = &AVR32_PWM;

  if (pwm_channel == 0) // Null pointer.
8000202c:	58 0b       	cp.w	r11,0
8000202e:	c1 90       	breq	80002060 <pwm_channel_init+0x34>
    return PWM_INVALID_ARGUMENT;
  if (channel_id > AVR32_PWM_LINES_MSB) // Control input values.
80002030:	58 6c       	cp.w	r12,6
80002032:	e0 8b 00 17 	brhi	80002060 <pwm_channel_init+0x34>
    return PWM_INVALID_INPUT;

  pwm->channel[channel_id].cmr= pwm_channel->cmr;   // Channel mode.
80002036:	76 0a       	ld.w	r10,r11[0x0]
80002038:	fe 78 30 00 	mov	r8,-53248
8000203c:	f8 c9 ff f0 	sub	r9,r12,-16
80002040:	a5 79       	lsl	r9,0x5
80002042:	f0 09 00 09 	add	r9,r8,r9
80002046:	93 0a       	st.w	r9[0x0],r10
  pwm->channel[channel_id].cdty= pwm_channel->cdty; // Duty cycle, should be < CPRD.
80002048:	76 19       	ld.w	r9,r11[0x4]
8000204a:	a5 7c       	lsl	r12,0x5
8000204c:	f0 0c 00 0c 	add	r12,r8,r12
80002050:	f8 c8 fd fc 	sub	r8,r12,-516
80002054:	91 09       	st.w	r8[0x0],r9
  pwm->channel[channel_id].cprd= pwm_channel->cprd; // Channel period.
80002056:	76 28       	ld.w	r8,r11[0x8]
80002058:	f8 cc fd f8 	sub	r12,r12,-520
8000205c:	99 08       	st.w	r12[0x0],r8
8000205e:	5e fd       	retal	0

  return PWM_SUCCESS;
80002060:	5e ff       	retal	1

80002062 <pwm_start_channels>:
}


int pwm_start_channels(unsigned long channels_bitmask)
{
  if (channels_bitmask & ~((1 << (AVR32_PWM_LINES_MSB + 1)) - 1))
80002062:	18 98       	mov	r8,r12
80002064:	e0 18 ff 80 	andl	r8,0xff80
80002068:	c0 20       	breq	8000206c <pwm_start_channels+0xa>
8000206a:	5e ff       	retal	1
    return PWM_INVALID_INPUT;

  AVR32_PWM.ena = channels_bitmask; // Enable channels.
8000206c:	fe 78 30 00 	mov	r8,-53248
80002070:	91 1c       	st.w	r8[0x4],r12
80002072:	5e fd       	retal	0

80002074 <pwm_async_update_channel>:

int pwm_async_update_channel(unsigned int channel_id, const avr32_pwm_channel_t *pwm_channel)
{
  volatile avr32_pwm_t *pwm = &AVR32_PWM;

  if (channel_id > AVR32_PWM_LINES_MSB)
80002074:	58 6c       	cp.w	r12,6
80002076:	e0 88 00 03 	brls	8000207c <pwm_async_update_channel+0x8>
8000207a:	5e ff       	retal	1
     return PWM_INVALID_INPUT;

  pwm->channel[channel_id].cmr= pwm_channel->cmr;   // Channel mode register: update of the period or duty cycle.
8000207c:	76 0a       	ld.w	r10,r11[0x0]
8000207e:	fe 78 30 00 	mov	r8,-53248
80002082:	f8 c9 ff f0 	sub	r9,r12,-16
80002086:	a5 79       	lsl	r9,0x5
80002088:	f0 09 00 09 	add	r9,r8,r9
8000208c:	93 0a       	st.w	r9[0x0],r10
  pwm->channel[channel_id].cupd= pwm_channel->cupd; // Channel update CPRDx or CDTYx according to CPD value in CMRx.
8000208e:	76 49       	ld.w	r9,r11[0x10]
80002090:	a5 7c       	lsl	r12,0x5
80002092:	18 08       	add	r8,r12
80002094:	f0 c8 fd f0 	sub	r8,r8,-528
80002098:	91 09       	st.w	r8[0x0],r9
8000209a:	5e fd       	retal	0

8000209c <usart_set_async_baudrate>:
 *
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_async_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
8000209c:	d4 01       	pushm	lr
  unsigned int over = (pba_hz >= 16 * baudrate) ? 16 : 8;
8000209e:	f6 08 15 04 	lsl	r8,r11,0x4
800020a2:	14 38       	cp.w	r8,r10
800020a4:	f9 b8 08 10 	movls	r8,16
800020a8:	f9 b8 0b 08 	movhi	r8,8
  unsigned int cd_fp = ((1 << AVR32_USART_BRGR_FP_SIZE) * pba_hz + (over * baudrate) / 2) / (over * baudrate);
800020ac:	f0 0b 02 4b 	mul	r11,r8,r11
800020b0:	f6 09 16 01 	lsr	r9,r11,0x1
800020b4:	f2 0a 00 3a 	add	r10,r9,r10<<0x3
800020b8:	f4 0b 0d 0a 	divu	r10,r10,r11
  unsigned int cd = cd_fp >> AVR32_USART_BRGR_FP_SIZE;
800020bc:	f4 09 16 03 	lsr	r9,r10,0x3
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
800020c0:	f2 cb 00 01 	sub	r11,r9,1
800020c4:	e0 4b ff fe 	cp.w	r11,65534
800020c8:	e0 88 00 03 	brls	800020ce <usart_set_async_baudrate+0x32>
800020cc:	da 0a       	popm	pc,r12=1
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
800020ce:	78 1b       	ld.w	r11,r12[0x4]
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
800020d0:	e8 6e 00 00 	mov	lr,524288
800020d4:	59 08       	cp.w	r8,16
800020d6:	fc 08 17 10 	movne	r8,lr
800020da:	f9 b8 00 00 	moveq	r8,0
800020de:	e4 1b ff f7 	andh	r11,0xfff7
800020e2:	e0 1b fe cf 	andl	r11,0xfecf
800020e6:	16 48       	or	r8,r11
800020e8:	99 18       	st.w	r12[0x4],r8
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
800020ea:	f5 da c0 03 	bfextu	r10,r10,0x0,0x3
800020ee:	f3 ea 11 09 	or	r9,r9,r10<<0x10
800020f2:	99 89       	st.w	r12[0x20],r9
800020f4:	d8 0a       	popm	pc,r12=0

800020f6 <usart_reset>:
//! @{


void usart_reset(volatile avr32_usart_t *usart)
{
  bool global_interrupt_enabled = cpu_irq_is_enabled();
800020f6:	e1 b8 00 00 	mfsr	r8,0x0

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
800020fa:	e6 18 00 01 	andh	r8,0x1,COH
800020fe:	c0 71       	brne	8000210c <usart_reset+0x16>
80002100:	d3 03       	ssrf	0x10
  usart->idr = 0xFFFFFFFF;
80002102:	3f f8       	mov	r8,-1
80002104:	99 38       	st.w	r12[0xc],r8
  usart->csr;
80002106:	78 58       	ld.w	r8,r12[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();
80002108:	d5 03       	csrf	0x10
8000210a:	c0 48       	rjmp	80002112 <usart_reset+0x1c>
  bool global_interrupt_enabled = cpu_irq_is_enabled();

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
  usart->idr = 0xFFFFFFFF;
8000210c:	3f f8       	mov	r8,-1
8000210e:	99 38       	st.w	r12[0xc],r8
  usart->csr;
80002110:	78 58       	ld.w	r8,r12[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();

  // Reset mode and other registers that could cause unpredictable behavior after reset.
  usart->mr = 0;
80002112:	30 08       	mov	r8,0
80002114:	99 18       	st.w	r12[0x4],r8
  usart->rtor = 0;
80002116:	99 98       	st.w	r12[0x24],r8
  usart->ttgr = 0;
80002118:	99 a8       	st.w	r12[0x28],r8

  // Shutdown TX and RX (will be re-enabled when setup has successfully completed),
  // reset status bits and turn off DTR and RTS.
  usart->cr = AVR32_USART_CR_RSTRX_MASK   |
8000211a:	ea 68 61 0c 	mov	r8,680204
8000211e:	99 08       	st.w	r12[0x0],r8
#ifndef AVR32_USART_440_H_INCLUDED
// Note: Modem Signal Management DTR-DSR-DCD-RI are not included in USART rev.440.
              AVR32_USART_CR_DTRDIS_MASK  |
#endif
              AVR32_USART_CR_RTSDIS_MASK;
}
80002120:	5e fc       	retal	r12
80002122:	d7 03       	nop

80002124 <usart_init_rs232>:


int usart_init_rs232(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
80002124:	eb cd 40 e0 	pushm	r5-r7,lr
80002128:	18 96       	mov	r6,r12
8000212a:	16 97       	mov	r7,r11
8000212c:	14 95       	mov	r5,r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
8000212e:	f0 1f 00 2f 	mcall	800021e8 <usart_init_rs232+0xc4>

  // Check input values.
  if (!opt || // Null pointer.
80002132:	58 07       	cp.w	r7,0
80002134:	c5 80       	breq	800021e4 <usart_init_rs232+0xc0>
      opt->charlength < 5 || opt->charlength > 9 ||
80002136:	0f c8       	ld.ub	r8,r7[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80002138:	30 49       	mov	r9,4
8000213a:	f2 08 18 00 	cp.b	r8,r9
8000213e:	e0 88 00 53 	brls	800021e4 <usart_init_rs232+0xc0>
80002142:	30 99       	mov	r9,9
80002144:	f2 08 18 00 	cp.b	r8,r9
80002148:	e0 8b 00 4e 	brhi	800021e4 <usart_init_rs232+0xc0>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
8000214c:	0f d9       	ld.ub	r9,r7[0x5]
8000214e:	30 78       	mov	r8,7
80002150:	f0 09 18 00 	cp.b	r9,r8
80002154:	e0 8b 00 48 	brhi	800021e4 <usart_init_rs232+0xc0>
      opt->stopbits > 2 + 255 ||
80002158:	8e 39       	ld.sh	r9,r7[0x6]
8000215a:	e0 68 01 01 	mov	r8,257
8000215e:	f0 09 19 00 	cp.h	r9,r8
80002162:	e0 8b 00 41 	brhi	800021e4 <usart_init_rs232+0xc0>
      opt->channelmode > 3 ||
80002166:	ef 39 00 08 	ld.ub	r9,r7[8]
8000216a:	30 38       	mov	r8,3
8000216c:	f0 09 18 00 	cp.b	r9,r8
80002170:	e0 8b 00 3a 	brhi	800021e4 <usart_init_rs232+0xc0>
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
80002174:	0a 9a       	mov	r10,r5
80002176:	6e 0b       	ld.w	r11,r7[0x0]
80002178:	0c 9c       	mov	r12,r6
8000217a:	f0 1f 00 1d 	mcall	800021ec <usart_init_rs232+0xc8>
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8000217e:	58 1c       	cp.w	r12,1
80002180:	c3 20       	breq	800021e4 <usart_init_rs232+0xc0>
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;

  if (opt->charlength == 9)
80002182:	0f c8       	ld.ub	r8,r7[0x4]
80002184:	30 99       	mov	r9,9
80002186:	f2 08 18 00 	cp.b	r8,r9
8000218a:	c0 51       	brne	80002194 <usart_init_rs232+0x70>
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
8000218c:	6c 18       	ld.w	r8,r6[0x4]
8000218e:	b1 b8       	sbr	r8,0x11
80002190:	8d 18       	st.w	r6[0x4],r8
80002192:	c0 68       	rjmp	8000219e <usart_init_rs232+0x7a>
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
80002194:	6c 19       	ld.w	r9,r6[0x4]
80002196:	20 58       	sub	r8,5
80002198:	f3 e8 10 68 	or	r8,r9,r8<<0x6
8000219c:	8d 18       	st.w	r6[0x4],r8
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
8000219e:	6c 19       	ld.w	r9,r6[0x4]
800021a0:	ef 3a 00 08 	ld.ub	r10,r7[8]
800021a4:	0f d8       	ld.ub	r8,r7[0x5]
800021a6:	a9 78       	lsl	r8,0x9
800021a8:	f1 ea 10 e8 	or	r8,r8,r10<<0xe
800021ac:	12 48       	or	r8,r9
800021ae:	8d 18       	st.w	r6[0x4],r8
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;

  if (opt->stopbits > USART_2_STOPBITS)
800021b0:	8e 38       	ld.sh	r8,r7[0x6]
800021b2:	30 29       	mov	r9,2
800021b4:	f2 08 19 00 	cp.h	r8,r9
800021b8:	e0 88 00 09 	brls	800021ca <usart_init_rs232+0xa6>
  {
    // Set two stop bits
    usart->mr |= AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET;
800021bc:	6c 18       	ld.w	r8,r6[0x4]
800021be:	ad b8       	sbr	r8,0xd
800021c0:	8d 18       	st.w	r6[0x4],r8
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
800021c2:	8e b8       	ld.uh	r8,r7[0x6]
800021c4:	20 28       	sub	r8,2
800021c6:	8d a8       	st.w	r6[0x28],r8
800021c8:	c0 68       	rjmp	800021d4 <usart_init_rs232+0xb0>
  }
  else
    // Insert 1, 1.5 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;
800021ca:	6c 19       	ld.w	r9,r6[0x4]
800021cc:	5c 78       	castu.h	r8
800021ce:	f3 e8 10 c8 	or	r8,r9,r8<<0xc
800021d2:	8d 18       	st.w	r6[0x4],r8

  // Set normal mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
800021d4:	6c 18       	ld.w	r8,r6[0x4]
800021d6:	e0 18 ff f0 	andl	r8,0xfff0
800021da:	8d 18       	st.w	r6[0x4],r8
              AVR32_USART_MR_MODE_NORMAL << AVR32_USART_MR_MODE_OFFSET;

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
800021dc:	35 08       	mov	r8,80
800021de:	8d 08       	st.w	r6[0x0],r8
800021e0:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
800021e4:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
800021e8:	80 00       	ld.sh	r0,r0[0x0]
800021ea:	20 f6       	sub	r6,15
800021ec:	80 00       	ld.sh	r0,r0[0x0]
800021ee:	20 9c       	sub	r12,9

800021f0 <init_dbg_rs232_ex>:
  init_dbg_rs232_ex(DBG_USART_BAUDRATE, pba_hz);
}


void init_dbg_rs232_ex(unsigned long baudrate, long pba_hz)
{
800021f0:	eb cd 40 80 	pushm	r7,lr
800021f4:	20 3d       	sub	sp,12
800021f6:	16 97       	mov	r7,r11
    .baudrate = baudrate,
    .charlength = 8,
    .paritytype = USART_NO_PARITY,
    .stopbits = USART_1_STOPBIT,
    .channelmode = USART_NORMAL_CHMODE
  };
800021f8:	50 0c       	stdsp	sp[0x0],r12
800021fa:	30 88       	mov	r8,8
800021fc:	ba c8       	st.b	sp[0x4],r8
800021fe:	30 48       	mov	r8,4
80002200:	ba d8       	st.b	sp[0x5],r8
80002202:	30 08       	mov	r8,0
80002204:	ba 38       	st.h	sp[0x6],r8
80002206:	fb 68 00 08 	st.b	sp[8],r8

  // Setup GPIO for debug USART.
  gpio_enable_module(DBG_USART_GPIO_MAP,
8000220a:	30 2b       	mov	r11,2
8000220c:	48 6c       	lddpc	r12,80002224 <init_dbg_rs232_ex+0x34>
8000220e:	f0 1f 00 07 	mcall	80002228 <init_dbg_rs232_ex+0x38>
                     sizeof(DBG_USART_GPIO_MAP) / sizeof(DBG_USART_GPIO_MAP[0]));

  // Initialize it in RS232 mode.
  usart_init_rs232(DBG_USART, &dbg_usart_options, pba_hz);
80002212:	0e 9a       	mov	r10,r7
80002214:	1a 9b       	mov	r11,sp
80002216:	fe 7c 18 00 	mov	r12,-59392
8000221a:	f0 1f 00 05 	mcall	8000222c <init_dbg_rs232_ex+0x3c>
}
8000221e:	2f dd       	sub	sp,-12
80002220:	e3 cd 80 80 	ldm	sp++,r7,pc
80002224:	80 00       	ld.sh	r0,r0[0x0]
80002226:	2a 00       	sub	r0,-96
80002228:	80 00       	ld.sh	r0,r0[0x0]
8000222a:	23 b8       	sub	r8,59
8000222c:	80 00       	ld.sh	r0,r0[0x0]
8000222e:	21 24       	sub	r4,18

80002230 <init_dbg_rs232>:
//! ASCII representation of hexadecimal digits.
static const char HEX_DIGITS[16] = "0123456789ABCDEF";


void init_dbg_rs232(long pba_hz)
{
80002230:	d4 01       	pushm	lr
  init_dbg_rs232_ex(DBG_USART_BAUDRATE, pba_hz);
80002232:	18 9b       	mov	r11,r12
80002234:	e0 6c e1 00 	mov	r12,57600
80002238:	f0 1f 00 02 	mcall	80002240 <init_dbg_rs232+0x10>
}
8000223c:	d8 02       	popm	pc
8000223e:	00 00       	add	r0,r0
80002240:	80 00       	ld.sh	r0,r0[0x0]
80002242:	21 f0       	sub	r0,31

80002244 <board_init>:
#if defined (CONF_BOARD_AT45DBX)
#  define AT45DBX_MEM_CNT  1
#endif

void board_init(void)
{
80002244:	d4 01       	pushm	lr
	gpio_configure_pin(LED0_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80002246:	30 3b       	mov	r11,3
80002248:	33 bc       	mov	r12,59
8000224a:	f0 1f 00 2c 	mcall	800022f8 <board_init+0xb4>
	gpio_configure_pin(LED1_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000224e:	30 3b       	mov	r11,3
80002250:	33 cc       	mov	r12,60
80002252:	f0 1f 00 2a 	mcall	800022f8 <board_init+0xb4>
	gpio_configure_pin(LED2_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80002256:	30 3b       	mov	r11,3
80002258:	33 dc       	mov	r12,61
8000225a:	f0 1f 00 28 	mcall	800022f8 <board_init+0xb4>
	gpio_configure_pin(LED3_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000225e:	30 3b       	mov	r11,3
80002260:	33 ec       	mov	r12,62
80002262:	f0 1f 00 26 	mcall	800022f8 <board_init+0xb4>
	gpio_configure_pin(LED4_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80002266:	30 3b       	mov	r11,3
80002268:	33 3c       	mov	r12,51
8000226a:	f0 1f 00 24 	mcall	800022f8 <board_init+0xb4>
	gpio_configure_pin(LED5_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000226e:	30 3b       	mov	r11,3
80002270:	33 4c       	mov	r12,52
80002272:	f0 1f 00 22 	mcall	800022f8 <board_init+0xb4>
	gpio_configure_pin(LED6_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80002276:	30 3b       	mov	r11,3
80002278:	33 5c       	mov	r12,53
8000227a:	f0 1f 00 20 	mcall	800022f8 <board_init+0xb4>
	gpio_configure_pin(LED7_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000227e:	30 3b       	mov	r11,3
80002280:	33 6c       	mov	r12,54
80002282:	f0 1f 00 1e 	mcall	800022f8 <board_init+0xb4>

	gpio_configure_pin(GPIO_PUSH_BUTTON_0,GPIO_DIR_INPUT);
80002286:	30 0b       	mov	r11,0
80002288:	35 8c       	mov	r12,88
8000228a:	f0 1f 00 1c 	mcall	800022f8 <board_init+0xb4>
	gpio_configure_pin(GPIO_PUSH_BUTTON_1,GPIO_DIR_INPUT);
8000228e:	30 0b       	mov	r11,0
80002290:	35 5c       	mov	r12,85
80002292:	f0 1f 00 1a 	mcall	800022f8 <board_init+0xb4>
	gpio_configure_pin(GPIO_PUSH_BUTTON_2,GPIO_DIR_INPUT);
80002296:	30 0b       	mov	r11,0
80002298:	35 2c       	mov	r12,82
8000229a:	f0 1f 00 18 	mcall	800022f8 <board_init+0xb4>
	gpio_configure_pin(GPIO_JOYSTICK_PUSH,GPIO_DIR_INPUT);
8000229e:	30 0b       	mov	r11,0
800022a0:	31 4c       	mov	r12,20
800022a2:	f0 1f 00 16 	mcall	800022f8 <board_init+0xb4>
	gpio_configure_pin(GPIO_JOYSTICK_LEFT,GPIO_DIR_INPUT);
800022a6:	30 0b       	mov	r11,0
800022a8:	31 9c       	mov	r12,25
800022aa:	f0 1f 00 14 	mcall	800022f8 <board_init+0xb4>
	gpio_configure_pin(GPIO_JOYSTICK_UP,GPIO_DIR_INPUT);
800022ae:	30 0b       	mov	r11,0
800022b0:	31 ac       	mov	r12,26
800022b2:	f0 1f 00 12 	mcall	800022f8 <board_init+0xb4>
	gpio_configure_pin(GPIO_JOYSTICK_DOWN,GPIO_DIR_INPUT);
800022b6:	30 0b       	mov	r11,0
800022b8:	31 bc       	mov	r12,27
800022ba:	f0 1f 00 10 	mcall	800022f8 <board_init+0xb4>
		MREPEAT(AT45DBX_MEM_CNT, AT45DBX_ENABLE_NPCS_PIN, ~)
#  undef AT45DBX_ENABLE_NPCS_PIN
	};

	// Assign I/Os to SPI.
	gpio_enable_module(AT45DBX_SPI_GPIO_MAP,
800022be:	30 4b       	mov	r11,4
800022c0:	48 fc       	lddpc	r12,800022fc <board_init+0xb8>
800022c2:	f0 1f 00 10 	mcall	80002300 <board_init+0xbc>
		{SD_MMC_SPI_MOSI_PIN, SD_MMC_SPI_MOSI_FUNCTION},
		{SD_MMC_SPI_NPCS_PIN, SD_MMC_SPI_NPCS_FUNCTION},
	};

	// Assign I/Os to SPI.
	gpio_enable_module(SD_MMC_SPI_GPIO_MAP,
800022c6:	30 4b       	mov	r11,4
800022c8:	48 fc       	lddpc	r12,80002304 <board_init+0xc0>
800022ca:	f0 1f 00 0e 	mcall	80002300 <board_init+0xbc>

	// Configure SD/MMC card detect and write protect pins
#  define SD_MMC_CONFIGURE_CD_WP_PIN(slot, unused) \
	gpio_configure_pin(SD_MMC_##slot##_CD_GPIO,GPIO_DIR_INPUT); \
	gpio_configure_pin(SD_MMC_##slot##_WP_GPIO,GPIO_DIR_INPUT);
	MREPEAT(SD_MMC_SPI_MEM_CNT, SD_MMC_CONFIGURE_CD_WP_PIN, ~)
800022ce:	30 0b       	mov	r11,0
800022d0:	30 2c       	mov	r12,2
800022d2:	f0 1f 00 0a 	mcall	800022f8 <board_init+0xb4>
800022d6:	30 0b       	mov	r11,0
800022d8:	30 7c       	mov	r12,7
800022da:	f0 1f 00 08 	mcall	800022f8 <board_init+0xb4>
		{AVR32_TWI_SDA_0_0_PIN, AVR32_TWI_SDA_0_0_FUNCTION},
		{AVR32_TWI_SCL_0_0_PIN, AVR32_TWI_SCL_0_0_FUNCTION},
	};

	// TWI gpio pins configuration
	gpio_enable_module(TWI_GPIO_MAP,
800022de:	30 2b       	mov	r11,2
800022e0:	48 ac       	lddpc	r12,80002308 <board_init+0xc4>
800022e2:	f0 1f 00 08 	mcall	80002300 <board_init+0xbc>
	// USART GPIO pin configuration.
	static const gpio_map_t COMPORT_GPIO_MAP = {
		{USART_RXD_PIN, USART_RXD_FUNCTION },
		{USART_TXD_PIN, USART_TXD_FUNCTION },
	};
	gpio_enable_module(COMPORT_GPIO_MAP,
800022e6:	30 2b       	mov	r11,2
800022e8:	48 9c       	lddpc	r12,8000230c <board_init+0xc8>
800022ea:	f0 1f 00 06 	mcall	80002300 <board_init+0xbc>
	// USART GPIO pin configuration.
	static const gpio_map_t COMPORT0_GPIO_MAP = {
		{USART0_RXD_PIN, USART0_RXD_FUNCTION },
		{USART0_TXD_PIN, USART0_TXD_FUNCTION },
	};
	gpio_enable_module(COMPORT0_GPIO_MAP,
800022ee:	30 2b       	mov	r11,2
800022f0:	48 8c       	lddpc	r12,80002310 <board_init+0xcc>
800022f2:	f0 1f 00 04 	mcall	80002300 <board_init+0xbc>
			sizeof(COMPORT0_GPIO_MAP) / sizeof(COMPORT0_GPIO_MAP[0]));
#endif
}
800022f6:	d8 02       	popm	pc
800022f8:	80 00       	ld.sh	r0,r0[0x0]
800022fa:	23 e8       	sub	r8,62
800022fc:	80 00       	ld.sh	r0,r0[0x0]
800022fe:	2a 60       	sub	r0,-90
80002300:	80 00       	ld.sh	r0,r0[0x0]
80002302:	23 b8       	sub	r8,59
80002304:	80 00       	ld.sh	r0,r0[0x0]
80002306:	2a 10       	sub	r0,-95
80002308:	80 00       	ld.sh	r0,r0[0x0]
8000230a:	2a 50       	sub	r0,-91
8000230c:	80 00       	ld.sh	r0,r0[0x0]
8000230e:	2a 40       	sub	r0,-92
80002310:	80 00       	ld.sh	r0,r0[0x0]
80002312:	2a 30       	sub	r0,-93

80002314 <LED_Toggle>:
  tLED_DESCRIPTOR *led_descriptor = &LED_DESCRIPTOR[0] - 1;
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // Make sure only existing LEDs are specified.
  leds &= (1 << LED_COUNT) - 1;
80002314:	f9 dc c0 08 	bfextu	r12,r12,0x0,0x8

  // Update the saved state of all LEDs with the requested changes.
  Tgl_bits(LED_State, leds);
80002318:	49 18       	lddpc	r8,8000235c <LED_Toggle+0x48>
8000231a:	70 09       	ld.w	r9,r8[0x0]
8000231c:	f9 e9 20 09 	eor	r9,r12,r9
80002320:	91 09       	st.w	r8[0x0],r9

  // While there are specified LEDs left to manage...
  while (leds)
80002322:	58 0c       	cp.w	r12,0
80002324:	5e 0c       	reteq	r12
80002326:	48 f8       	lddpc	r8,80002360 <LED_Toggle+0x4c>
80002328:	21 08       	sub	r8,16
  {
    // Select the next specified LED and toggle it.
    led_shift = 1 + ctz(leds);
8000232a:	18 9a       	mov	r10,r12
8000232c:	5c 9a       	brev	r10
8000232e:	f4 0a 12 00 	clz	r10,r10
80002332:	2f fa       	sub	r10,-1
    led_descriptor += led_shift;
80002334:	f4 09 15 04 	lsl	r9,r10,0x4
80002338:	12 08       	add	r8,r9
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
8000233a:	70 09       	ld.w	r9,r8[0x0]
8000233c:	a9 69       	lsl	r9,0x8
8000233e:	e0 29 f0 00 	sub	r9,61440
    led_gpio_port->ovrt  = led_descriptor->GPIO.PIN_MASK;
80002342:	70 1b       	ld.w	r11,r8[0x4]
80002344:	f3 4b 00 5c 	st.w	r9[92],r11
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
80002348:	70 1b       	ld.w	r11,r8[0x4]
8000234a:	f3 4b 00 44 	st.w	r9[68],r11
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
8000234e:	70 1b       	ld.w	r11,r8[0x4]
80002350:	93 1b       	st.w	r9[0x4],r11
    leds >>= led_shift;
80002352:	f8 0a 0a 4c 	lsr	r12,r12,r10

  // Update the saved state of all LEDs with the requested changes.
  Tgl_bits(LED_State, leds);

  // While there are specified LEDs left to manage...
  while (leds)
80002356:	ce a1       	brne	8000232a <LED_Toggle+0x16>
80002358:	5e fc       	retal	r12
8000235a:	00 00       	add	r0,r0
8000235c:	00 00       	add	r0,r0
8000235e:	00 08       	add	r8,r0
80002360:	80 00       	ld.sh	r0,r0[0x0]
80002362:	2a 80       	sub	r0,-88

80002364 <gpio_enable_module_pin>:
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002364:	f8 08 16 05 	lsr	r8,r12,0x5
80002368:	a9 68       	lsl	r8,0x8
8000236a:	e0 28 f0 00 	sub	r8,61440

	/* Enable the correct function. */
	switch (function) {
8000236e:	58 1b       	cp.w	r11,1
80002370:	c0 d0       	breq	8000238a <gpio_enable_module_pin+0x26>
80002372:	c0 63       	brcs	8000237e <gpio_enable_module_pin+0x1a>
80002374:	58 2b       	cp.w	r11,2
80002376:	c1 00       	breq	80002396 <gpio_enable_module_pin+0x32>
80002378:	58 3b       	cp.w	r11,3
8000237a:	c1 40       	breq	800023a2 <gpio_enable_module_pin+0x3e>
8000237c:	5e ff       	retal	1
	case 0: /* A function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
8000237e:	30 19       	mov	r9,1
80002380:	f2 0c 09 49 	lsl	r9,r9,r12
80002384:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002386:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
80002388:	c1 28       	rjmp	800023ac <gpio_enable_module_pin+0x48>

	case 1: /* B function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
8000238a:	30 19       	mov	r9,1
8000238c:	f2 0c 09 49 	lsl	r9,r9,r12
80002390:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002392:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
80002394:	c0 c8       	rjmp	800023ac <gpio_enable_module_pin+0x48>

	case 2: /* C function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80002396:	30 19       	mov	r9,1
80002398:	f2 0c 09 49 	lsl	r9,r9,r12
8000239c:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
8000239e:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
800023a0:	c0 68       	rjmp	800023ac <gpio_enable_module_pin+0x48>

	case 3: /* D function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
800023a2:	30 19       	mov	r9,1
800023a4:	f2 0c 09 49 	lsl	r9,r9,r12
800023a8:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
800023aa:	91 99       	st.w	r8[0x24],r9
	default:
		return GPIO_INVALID_ARGUMENT;
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
800023ac:	30 19       	mov	r9,1
800023ae:	f2 0c 09 4c 	lsl	r12,r9,r12
800023b2:	91 2c       	st.w	r8[0x8],r12
800023b4:	5e fd       	retal	0
800023b6:	d7 03       	nop

800023b8 <gpio_enable_module>:
 * \param size The number of pins in \a gpiomap.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
800023b8:	d4 21       	pushm	r4-r7,lr
800023ba:	18 97       	mov	r7,r12
800023bc:	16 94       	mov	r4,r11
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
800023be:	58 0b       	cp.w	r11,0
800023c0:	c0 31       	brne	800023c6 <gpio_enable_module+0xe>
800023c2:	30 05       	mov	r5,0
800023c4:	c0 d8       	rjmp	800023de <gpio_enable_module+0x26>
800023c6:	30 06       	mov	r6,0
800023c8:	0c 95       	mov	r5,r6
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
800023ca:	6e 1b       	ld.w	r11,r7[0x4]
800023cc:	6e 0c       	ld.w	r12,r7[0x0]
800023ce:	f0 1f 00 06 	mcall	800023e4 <gpio_enable_module+0x2c>
800023d2:	18 45       	or	r5,r12
		gpiomap++;
800023d4:	2f 87       	sub	r7,-8
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
800023d6:	2f f6       	sub	r6,-1
800023d8:	0c 34       	cp.w	r4,r6
800023da:	fe 9b ff f8 	brhi	800023ca <gpio_enable_module+0x12>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
	}

	return status;
}
800023de:	0a 9c       	mov	r12,r5
800023e0:	d8 22       	popm	r4-r7,pc
800023e2:	00 00       	add	r0,r0
800023e4:	80 00       	ld.sh	r0,r0[0x0]
800023e6:	23 64       	sub	r4,54

800023e8 <gpio_configure_pin>:
 * \param pin The pin number.
 * \param flags The configuration.
 */
void gpio_configure_pin(uint32_t pin, uint32_t flags)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800023e8:	f8 08 16 05 	lsr	r8,r12,0x5
800023ec:	a9 68       	lsl	r8,0x8
800023ee:	e0 28 f0 00 	sub	r8,61440
	} else {
		gpio_port->pderc = 1 << (pin & 0x1F);
	}

#endif
	if (flags & GPIO_PULL_UP) {
800023f2:	16 99       	mov	r9,r11
800023f4:	e2 19 00 04 	andl	r9,0x4,COH
800023f8:	c0 70       	breq	80002406 <gpio_configure_pin+0x1e>
		gpio_port->puers = 1 << (pin & 0x1F);
800023fa:	30 19       	mov	r9,1
800023fc:	f2 0c 09 49 	lsl	r9,r9,r12
80002400:	f1 49 00 74 	st.w	r8[116],r9
80002404:	c0 68       	rjmp	80002410 <gpio_configure_pin+0x28>
	} else {
		gpio_port->puerc = 1 << (pin & 0x1F);
80002406:	30 19       	mov	r9,1
80002408:	f2 0c 09 49 	lsl	r9,r9,r12
8000240c:	f1 49 00 78 	st.w	r8[120],r9
	}

#endif

	/* Select interrupt level for group */
	if (flags & GPIO_INTERRUPT) {
80002410:	16 99       	mov	r9,r11
80002412:	e2 19 00 80 	andl	r9,0x80,COH
80002416:	c2 40       	breq	8000245e <gpio_configure_pin+0x76>
		if (flags & GPIO_BOTHEDGES) {
80002418:	16 99       	mov	r9,r11
8000241a:	e2 19 01 80 	andl	r9,0x180,COH
8000241e:	c0 90       	breq	80002430 <gpio_configure_pin+0x48>
			gpio_port->imr0c = 1 << (pin & 0x1F);
80002420:	30 19       	mov	r9,1
80002422:	f2 0c 09 49 	lsl	r9,r9,r12
80002426:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
8000242a:	f1 49 00 b8 	st.w	r8[184],r9
8000242e:	c1 88       	rjmp	8000245e <gpio_configure_pin+0x76>
		} else if (flags & GPIO_RISING) {
80002430:	16 99       	mov	r9,r11
80002432:	e2 19 02 80 	andl	r9,0x280,COH
80002436:	c0 90       	breq	80002448 <gpio_configure_pin+0x60>
			gpio_port->imr0s = 1 << (pin & 0x1F);
80002438:	30 19       	mov	r9,1
8000243a:	f2 0c 09 49 	lsl	r9,r9,r12
8000243e:	f1 49 00 a4 	st.w	r8[164],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
80002442:	f1 49 00 b8 	st.w	r8[184],r9
80002446:	c0 c8       	rjmp	8000245e <gpio_configure_pin+0x76>
		} else if (flags & GPIO_FALLING) {
80002448:	16 99       	mov	r9,r11
8000244a:	e2 19 03 80 	andl	r9,0x380,COH
8000244e:	c0 80       	breq	8000245e <gpio_configure_pin+0x76>
			gpio_port->imr0c = 1 << (pin & 0x1F);
80002450:	30 19       	mov	r9,1
80002452:	f2 0c 09 49 	lsl	r9,r9,r12
80002456:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1s = 1 << (pin & 0x1F);
8000245a:	f1 49 00 b4 	st.w	r8[180],r9
		}
	}

	/* Select direction and initial pin state */
	if (flags & GPIO_DIR_OUTPUT) {
8000245e:	f3 db c0 01 	bfextu	r9,r11,0x0,0x1
80002462:	c1 50       	breq	8000248c <gpio_configure_pin+0xa4>
		if (flags & GPIO_INIT_HIGH) {
80002464:	e2 1b 00 02 	andl	r11,0x2,COH
80002468:	c0 70       	breq	80002476 <gpio_configure_pin+0x8e>
			gpio_port->ovrs = 1 << (pin & 0x1F);
8000246a:	30 19       	mov	r9,1
8000246c:	f2 0c 09 49 	lsl	r9,r9,r12
80002470:	f1 49 00 54 	st.w	r8[84],r9
80002474:	c0 68       	rjmp	80002480 <gpio_configure_pin+0x98>
		} else {
			gpio_port->ovrc = 1 << (pin & 0x1F);
80002476:	30 19       	mov	r9,1
80002478:	f2 0c 09 49 	lsl	r9,r9,r12
8000247c:	f1 49 00 58 	st.w	r8[88],r9
		}

		gpio_port->oders = 1 << (pin & 0x1F);
80002480:	30 19       	mov	r9,1
80002482:	f2 0c 09 49 	lsl	r9,r9,r12
80002486:	f1 49 00 44 	st.w	r8[68],r9
8000248a:	c0 68       	rjmp	80002496 <gpio_configure_pin+0xae>
	} else {
		gpio_port->oderc = 1 << (pin & 0x1F);
8000248c:	30 19       	mov	r9,1
8000248e:	f2 0c 09 49 	lsl	r9,r9,r12
80002492:	f1 49 00 48 	st.w	r8[72],r9
	}

	/* Enable GPIO */
	gpio_port->gpers = 1 << (pin & 0x1F);
80002496:	30 19       	mov	r9,1
80002498:	f2 0c 09 4c 	lsl	r12,r9,r12
8000249c:	91 1c       	st.w	r8[0x4],r12
}
8000249e:	5e fc       	retal	r12

800024a0 <_get_interrupt_handler>:
__int_handler _get_interrupt_handler(uint32_t int_level)
{
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
800024a0:	fe 78 08 00 	mov	r8,-63488
800024a4:	e0 69 00 83 	mov	r9,131
800024a8:	f2 0c 01 0c 	sub	r12,r9,r12
800024ac:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
	uint32_t int_req = AVR32_INTC.irr[int_grp];
800024b0:	f2 ca ff c0 	sub	r10,r9,-64
800024b4:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
800024b8:	58 08       	cp.w	r8,0
800024ba:	c0 21       	brne	800024be <_get_interrupt_handler+0x1e>
800024bc:	5e fd       	retal	0
		? _int_handler_table[int_grp]._int_line_handler_table[32
800024be:	f0 08 12 00 	clz	r8,r8
800024c2:	48 5a       	lddpc	r10,800024d4 <_get_interrupt_handler+0x34>
800024c4:	f4 09 00 39 	add	r9,r10,r9<<0x3
800024c8:	f0 08 11 1f 	rsub	r8,r8,31
800024cc:	72 19       	ld.w	r9,r9[0x4]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
800024ce:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
800024d2:	5e fc       	retal	r12
800024d4:	80 00       	ld.sh	r0,r0[0x0]
800024d6:	2b 00       	sub	r0,-80

800024d8 <_stext>:

  .global _stext
  .type _stext, @function
_stext:
  // Set initial stack pointer.
  lda.w   sp, _estack
800024d8:	e0 7d 00 00 	mov	sp,65536

  // Set up EVBA so interrupts can be enabled.
  lda.w   r0, _evba
  mtsr    AVR32_EVBA, r0
800024dc:	fe c0 fc dc 	sub	r0,pc,-804

  // Enable the exception processing.
  csrf    AVR32_SR_EM_OFFSET
800024e0:	e3 b0 00 01 	mtsr	0x4,r0

  // Load initialized data having a global lifetime from the data LMA.
  lda.w   r0, _data
  lda.w   r1, _edata
800024e4:	d5 53       	csrf	0x15
  cp      r0, r1
800024e6:	30 80       	mov	r0,8
  brhs    idata_load_loop_end
800024e8:	31 01       	mov	r1,16
  lda.w   r2, _data_lma
800024ea:	02 30       	cp.w	r0,r1
idata_load_loop:
  ld.d    r4, r2++
800024ec:	c0 72       	brcc	800024fa <idata_load_loop_end>
  st.d    r0++, r4
800024ee:	fe c2 f9 46 	sub	r2,pc,-1722

800024f2 <idata_load_loop>:
  cp      r0, r1
  brlo    idata_load_loop
800024f2:	a5 05       	ld.d	r4,r2++
idata_load_loop_end:

  // Clear uninitialized data having a global lifetime in the blank static storage section.
  lda.w   r0, __bss_start
800024f4:	a1 24       	st.d	r0++,r4
  lda.w   r1, _end
800024f6:	02 30       	cp.w	r0,r1
  cp      r0, r1
800024f8:	cf d3       	brcs	800024f2 <idata_load_loop>

800024fa <idata_load_loop_end>:
  brhs    udata_clear_loop_end
800024fa:	31 00       	mov	r0,16
  mov     r2, 0
800024fc:	e0 61 01 00 	mov	r1,256
  mov     r3, 0
udata_clear_loop:
  st.d    r0++, r2
80002500:	02 30       	cp.w	r0,r1
  cp      r0, r1
80002502:	c0 62       	brcc	8000250e <udata_clear_loop_end>
  brlo    udata_clear_loop
80002504:	30 02       	mov	r2,0
  // Safety: Set the default "return" @ to the exit routine address.
  lda.w   lr, exit
#endif

  // Start the show.
  lda.w   pc, main
80002506:	30 03       	mov	r3,0

80002508 <udata_clear_loop>:
80002508:	a1 22       	st.d	r0++,r2
8000250a:	02 30       	cp.w	r0,r1
8000250c:	cf e3       	brcs	80002508 <udata_clear_loop>

8000250e <udata_clear_loop_end>:
8000250e:	fe cf ff fa 	sub	pc,pc,-6
80002512:	d7 03       	nop

80002514 <main>:
const gpio_map_t ADC_GPIO_MAP = {

	{EXAMPLE_ADC_LIGHT_PIN, EXAMPLE_ADC_LIGHT_FUNCTION},
};

int main(void) {
80002514:	eb cd 40 f8 	pushm	r3-r7,lr
80002518:	20 8d       	sub	sp,32
	
	board_init();
8000251a:	f0 1f 00 2d 	mcall	800025cc <main+0xb8>
	/* Init system clocks */
	sysclk_init();
8000251e:	f0 1f 00 2d 	mcall	800025d0 <main+0xbc>
	/* init debug serial line */
	init_dbg_rs232(sysclk_get_cpu_hz());
80002522:	e0 7c c2 00 	mov	r12,115200
80002526:	f0 1f 00 2c 	mcall	800025d4 <main+0xc0>
	
	unsigned int channel_id = 3;
	signed short adc_value_light = -1;
	avr32_pwm_channel_t pwm_channel = { .ccnt = 0 }; // One channel config.
8000252a:	32 0a       	mov	r10,32
8000252c:	30 0b       	mov	r11,0
8000252e:	1a 9c       	mov	r12,sp
80002530:	f0 1f 00 2a 	mcall	800025d8 <main+0xc4>
	
	gpio_enable_module_pin(EXAMPLE_PWM_PIN, EXAMPLE_PWM_FUNCTION);
80002534:	30 0b       	mov	r11,0
80002536:	33 6c       	mov	r12,54
80002538:	f0 1f 00 29 	mcall	800025dc <main+0xc8>
	pwm_channel.CMR.cpre = AVR32_PWM_CPRE_MCK_DIV_8; //Channel prescaler.
	pwm_channel.cdty = 1; // Channel duty cycle, should be <CPRD.
8000253c:	30 17       	mov	r7,1
8000253e:	50 17       	stdsp	sp[0x4],r7
	pwm_channel.cmr = 0;
80002540:	30 09       	mov	r9,0
	pwm_channel.CMR.cpd = 0;
80002542:	12 98       	mov	r8,r9
80002544:	f1 d9 d1 41 	bfins	r8,r9,0xa,0x1
80002548:	50 08       	stdsp	sp[0x0],r8
	pwm_channel.cprd = 20; // Channel period.
8000254a:	31 48       	mov	r8,20
8000254c:	50 28       	stdsp	sp[0x8],r8
	// With these settings, the output waveform period will be :
	// (115200/8)/20 == 760Hz == (MCK/prescaler)
	pwm_channel_init(channel_id, &pwm_channel); // Set channel configuration to channel 3.
8000254e:	1a 9b       	mov	r11,sp
80002550:	30 3c       	mov	r12,3
80002552:	f0 1f 00 24 	mcall	800025e0 <main+0xcc>
	pwm_start_channels(1 << channel_id); // Start channel 3.
80002556:	30 8c       	mov	r12,8
80002558:	f0 1f 00 23 	mcall	800025e4 <main+0xd0>
	
	/* Assign and enable GPIO pins to the ADC function. */
	gpio_enable_module(ADC_GPIO_MAP, sizeof(ADC_GPIO_MAP)/sizeof(ADC_GPIO_MAP[0]));
8000255c:	0e 9b       	mov	r11,r7
8000255e:	4a 3c       	lddpc	r12,800025e8 <main+0xd4>
80002560:	f0 1f 00 23 	mcall	800025ec <main+0xd8>
	
		/* Configure the ADC peripheral module.
	 * Lower the ADC clock to match the ADC characteristics (because we
	 * configured the CPU clock to 12MHz, and the ADC clock characteristics are
	 *  usually lower; cf. the ADC Characteristic section in the datasheet). */
	AVR32_ADC.mr |= 0x1 << AVR32_ADC_MR_PRESCAL_OFFSET;
80002564:	fe 77 3c 00 	mov	r7,-50176
80002568:	6e 18       	ld.w	r8,r7[0x4]
8000256a:	a9 a8       	sbr	r8,0x8
8000256c:	8f 18       	st.w	r7[0x4],r8
	adc_configure(&AVR32_ADC);
8000256e:	0e 9c       	mov	r12,r7
80002570:	f0 1f 00 20 	mcall	800025f0 <main+0xdc>
	/* Enable the ADC channels. */
	adc_enable(&AVR32_ADC, EXAMPLE_ADC_LIGHT_CHANNEL);
80002574:	30 2b       	mov	r11,2
80002576:	0e 9c       	mov	r12,r7
80002578:	f0 1f 00 1f 	mcall	800025f4 <main+0xe0>
	//print_dbg("\x1B[2J\x1B[H\r\nADC Example\r\n");
	
	while(1){
		
		/* Start conversions on all enabled channels */
		adc_start(&AVR32_ADC);
8000257c:	0e 96       	mov	r6,r7
		
		/* Get value for the light adc channel */
		adc_value_light = 500;//adc_get_value(&AVR32_ADC,EXAMPLE_ADC_LIGHT_CHANNEL);
	
		//pwm_channel.cdty = (20/1024)*adc_value_light; // Channel duty cycle, should be <CPRD.
		pwm_channel.CMR.cpd = 0;
8000257e:	30 07       	mov	r7,0
		pwm_channel.cmr = 0;
		pwm_channel.cupd = (20/1024)*adc_value_light;
		pwm_async_update_channel(channel_id, &pwm_channel);
80002580:	30 34       	mov	r4,3
		//pwm_channel_init(channel_id, &pwm_channel); // Set channel configuration to channel 3.
		//pwm_start_channels(1 << channel_id); // Start channel 3.
		/* Slow down the display of converted values */
		LED_Toggle((LED0));
80002582:	30 13       	mov	r3,1
	//print_dbg("\x1B[2J\x1B[H\r\nADC Example\r\n");
	
	while(1){
		
		/* Start conversions on all enabled channels */
		adc_start(&AVR32_ADC);
80002584:	0c 9c       	mov	r12,r6
80002586:	f0 1f 00 1d 	mcall	800025f8 <main+0xe4>
		/* Get value for the light adc channel */
		adc_value_light = 500;//adc_get_value(&AVR32_ADC,EXAMPLE_ADC_LIGHT_CHANNEL);
	
		//pwm_channel.cdty = (20/1024)*adc_value_light; // Channel duty cycle, should be <CPRD.
		pwm_channel.CMR.cpd = 0;
		pwm_channel.cmr = 0;
8000258a:	50 07       	stdsp	sp[0x0],r7
		pwm_channel.cupd = (20/1024)*adc_value_light;
8000258c:	50 47       	stdsp	sp[0x10],r7
		pwm_async_update_channel(channel_id, &pwm_channel);
8000258e:	1a 9b       	mov	r11,sp
80002590:	08 9c       	mov	r12,r4
80002592:	f0 1f 00 1b 	mcall	800025fc <main+0xe8>
		//pwm_channel_init(channel_id, &pwm_channel); // Set channel configuration to channel 3.
		//pwm_start_channels(1 << channel_id); // Start channel 3.
		/* Slow down the display of converted values */
		LED_Toggle((LED0));
80002596:	06 9c       	mov	r12,r3
80002598:	f0 1f 00 1a 	mcall	80002600 <main+0xec>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000259c:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800025a0:	e0 69 e1 00 	mov	r9,57600
800025a4:	f0 09 00 0a 	add	r10,r8,r9
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800025a8:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800025ac:	14 38       	cp.w	r8,r10
800025ae:	e0 88 00 08 	brls	800025be <main+0xaa>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800025b2:	12 38       	cp.w	r8,r9
800025b4:	fe 98 ff fa 	brls	800025a8 <main+0x94>
800025b8:	12 3a       	cp.w	r10,r9
800025ba:	ce 53       	brcs	80002584 <main+0x70>
800025bc:	cf 6b       	rjmp	800025a8 <main+0x94>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800025be:	12 38       	cp.w	r8,r9
800025c0:	fe 9b ff e2 	brhi	80002584 <main+0x70>
800025c4:	12 3a       	cp.w	r10,r9
800025c6:	cd f3       	brcs	80002584 <main+0x70>
800025c8:	cf 0b       	rjmp	800025a8 <main+0x94>
800025ca:	00 00       	add	r0,r0
800025cc:	80 00       	ld.sh	r0,r0[0x0]
800025ce:	22 44       	sub	r4,36
800025d0:	80 00       	ld.sh	r0,r0[0x0]
800025d2:	20 2a       	sub	r10,2
800025d4:	80 00       	ld.sh	r0,r0[0x0]
800025d6:	22 30       	sub	r0,35
800025d8:	80 00       	ld.sh	r0,r0[0x0]
800025da:	26 04       	sub	r4,96
800025dc:	80 00       	ld.sh	r0,r0[0x0]
800025de:	23 64       	sub	r4,54
800025e0:	80 00       	ld.sh	r0,r0[0x0]
800025e2:	20 2c       	sub	r12,2
800025e4:	80 00       	ld.sh	r0,r0[0x0]
800025e6:	20 62       	sub	r2,6
800025e8:	80 00       	ld.sh	r0,r0[0x0]
800025ea:	2b a0       	sub	r0,-70
800025ec:	80 00       	ld.sh	r0,r0[0x0]
800025ee:	23 b8       	sub	r8,59
800025f0:	80 00       	ld.sh	r0,r0[0x0]
800025f2:	20 08       	sub	r8,0
800025f4:	80 00       	ld.sh	r0,r0[0x0]
800025f6:	20 20       	sub	r0,2
800025f8:	80 00       	ld.sh	r0,r0[0x0]
800025fa:	20 1a       	sub	r10,1
800025fc:	80 00       	ld.sh	r0,r0[0x0]
800025fe:	20 74       	sub	r4,7
80002600:	80 00       	ld.sh	r0,r0[0x0]
80002602:	23 14       	sub	r4,49

80002604 <memset>:
80002604:	18 98       	mov	r8,r12
80002606:	c0 38       	rjmp	8000260c <memset+0x8>
80002608:	10 cb       	st.b	r8++,r11
8000260a:	20 1a       	sub	r10,1
8000260c:	58 0a       	cp.w	r10,0
8000260e:	cf d1       	brne	80002608 <memset+0x4>
80002610:	5e fc       	retal	r12

Disassembly of section .exception:

80002800 <_evba>:
_evba:

	.org  0x000
	// Unrecoverable Exception.
_handle_Unrecoverable_Exception:
	rjmp $
80002800:	c0 08       	rjmp	80002800 <_evba>
	...

80002804 <_handle_TLB_Multiple_Hit>:

	.org  0x004
	// TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
	rjmp $
80002804:	c0 08       	rjmp	80002804 <_handle_TLB_Multiple_Hit>
	...

80002808 <_handle_Bus_Error_Data_Fetch>:

	.org  0x008
	// Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
	rjmp $
80002808:	c0 08       	rjmp	80002808 <_handle_Bus_Error_Data_Fetch>
	...

8000280c <_handle_Bus_Error_Instruction_Fetch>:

	.org  0x00C
	// Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
	rjmp $
8000280c:	c0 08       	rjmp	8000280c <_handle_Bus_Error_Instruction_Fetch>
	...

80002810 <_handle_NMI>:

	.org  0x010
	// NMI.
_handle_NMI:
	rjmp $
80002810:	c0 08       	rjmp	80002810 <_handle_NMI>
	...

80002814 <_handle_Instruction_Address>:

	.org  0x014
	// Instruction Address.
_handle_Instruction_Address:
	rjmp $
80002814:	c0 08       	rjmp	80002814 <_handle_Instruction_Address>
	...

80002818 <_handle_ITLB_Protection>:

	.org  0x018
	// ITLB Protection.
_handle_ITLB_Protection:
	rjmp $
80002818:	c0 08       	rjmp	80002818 <_handle_ITLB_Protection>
	...

8000281c <_handle_Breakpoint>:

	.org  0x01C
	// Breakpoint.
_handle_Breakpoint:
	rjmp $
8000281c:	c0 08       	rjmp	8000281c <_handle_Breakpoint>
	...

80002820 <_handle_Illegal_Opcode>:

	.org  0x020
	// Illegal Opcode.
_handle_Illegal_Opcode:
	rjmp $
80002820:	c0 08       	rjmp	80002820 <_handle_Illegal_Opcode>
	...

80002824 <_handle_Unimplemented_Instruction>:

	.org  0x024
	// Unimplemented Instruction.
_handle_Unimplemented_Instruction:
	rjmp $
80002824:	c0 08       	rjmp	80002824 <_handle_Unimplemented_Instruction>
	...

80002828 <_handle_Privilege_Violation>:

	.org  0x028
	// Privilege Violation.
_handle_Privilege_Violation:
	rjmp $
80002828:	c0 08       	rjmp	80002828 <_handle_Privilege_Violation>
	...

8000282c <_handle_Floating_Point>:

	.org  0x02C
	// Floating-Point: UNUSED IN AVR32UC and AVR32AP.
_handle_Floating_Point:
	rjmp $
8000282c:	c0 08       	rjmp	8000282c <_handle_Floating_Point>
	...

80002830 <_handle_Coprocessor_Absent>:

	.org  0x030
	// Coprocessor Absent: UNUSED IN AVR32UC.
_handle_Coprocessor_Absent:
	rjmp $
80002830:	c0 08       	rjmp	80002830 <_handle_Coprocessor_Absent>
	...

80002834 <_handle_Data_Address_Read>:

	.org  0x034
	// Data Address (Read).
_handle_Data_Address_Read:
	rjmp $
80002834:	c0 08       	rjmp	80002834 <_handle_Data_Address_Read>
	...

80002838 <_handle_Data_Address_Write>:

	.org  0x038
	// Data Address (Write).
_handle_Data_Address_Write:
	rjmp $
80002838:	c0 08       	rjmp	80002838 <_handle_Data_Address_Write>
	...

8000283c <_handle_DTLB_Protection_Read>:

	.org  0x03C
	// DTLB Protection (Read).
_handle_DTLB_Protection_Read:
	rjmp $
8000283c:	c0 08       	rjmp	8000283c <_handle_DTLB_Protection_Read>
	...

80002840 <_handle_DTLB_Protection_Write>:

	.org  0x040
	// DTLB Protection (Write).
_handle_DTLB_Protection_Write:
	rjmp $
80002840:	c0 08       	rjmp	80002840 <_handle_DTLB_Protection_Write>
	...

80002844 <_handle_DTLB_Modified>:

	.org  0x044
	// DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
	rjmp $
80002844:	c0 08       	rjmp	80002844 <_handle_DTLB_Modified>
	...

80002850 <_handle_ITLB_Miss>:

	.org  0x050
	// ITLB Miss.
_handle_ITLB_Miss:
	rjmp $
80002850:	c0 08       	rjmp	80002850 <_handle_ITLB_Miss>
	...

80002860 <_handle_DTLB_Miss_Read>:

	.org  0x060
	// DTLB Miss (Read).
_handle_DTLB_Miss_Read:
	rjmp $
80002860:	c0 08       	rjmp	80002860 <_handle_DTLB_Miss_Read>
	...

80002870 <_handle_DTLB_Miss_Write>:

	.org  0x070
	// DTLB Miss (Write).
_handle_DTLB_Miss_Write:
	rjmp $
80002870:	c0 08       	rjmp	80002870 <_handle_DTLB_Miss_Write>
	...

80002900 <_handle_Supervisor_Call>:

	.org  0x100
	// Supervisor Call.
_handle_Supervisor_Call:
	rjmp $
80002900:	c0 08       	rjmp	80002900 <_handle_Supervisor_Call>
80002902:	d7 03       	nop

80002904 <_int0>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80002904:	30 0c       	mov	r12,0
80002906:	fe b0 fd cd 	rcall	800024a0 <_get_interrupt_handler>
8000290a:	58 0c       	cp.w	r12,0
8000290c:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80002910:	d6 03       	rete

80002912 <_int1>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80002912:	30 1c       	mov	r12,1
80002914:	fe b0 fd c6 	rcall	800024a0 <_get_interrupt_handler>
80002918:	58 0c       	cp.w	r12,0
8000291a:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000291e:	d6 03       	rete

80002920 <_int2>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80002920:	30 2c       	mov	r12,2
80002922:	fe b0 fd bf 	rcall	800024a0 <_get_interrupt_handler>
80002926:	58 0c       	cp.w	r12,0
80002928:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000292c:	d6 03       	rete

8000292e <_int3>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000292e:	30 3c       	mov	r12,3
80002930:	fe b0 fd b8 	rcall	800024a0 <_get_interrupt_handler>
80002934:	58 0c       	cp.w	r12,0
80002936:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000293a:	d6 03       	rete
8000293c:	d7 03       	nop
8000293e:	d7 03       	nop
80002940:	d7 03       	nop
80002942:	d7 03       	nop
80002944:	d7 03       	nop
80002946:	d7 03       	nop
80002948:	d7 03       	nop
8000294a:	d7 03       	nop
8000294c:	d7 03       	nop
8000294e:	d7 03       	nop
80002950:	d7 03       	nop
80002952:	d7 03       	nop
80002954:	d7 03       	nop
80002956:	d7 03       	nop
80002958:	d7 03       	nop
8000295a:	d7 03       	nop
8000295c:	d7 03       	nop
8000295e:	d7 03       	nop
80002960:	d7 03       	nop
80002962:	d7 03       	nop
80002964:	d7 03       	nop
80002966:	d7 03       	nop
80002968:	d7 03       	nop
8000296a:	d7 03       	nop
8000296c:	d7 03       	nop
8000296e:	d7 03       	nop
80002970:	d7 03       	nop
80002972:	d7 03       	nop
80002974:	d7 03       	nop
80002976:	d7 03       	nop
80002978:	d7 03       	nop
8000297a:	d7 03       	nop
8000297c:	d7 03       	nop
8000297e:	d7 03       	nop
80002980:	d7 03       	nop
80002982:	d7 03       	nop
80002984:	d7 03       	nop
80002986:	d7 03       	nop
80002988:	d7 03       	nop
8000298a:	d7 03       	nop
8000298c:	d7 03       	nop
8000298e:	d7 03       	nop
80002990:	d7 03       	nop
80002992:	d7 03       	nop
80002994:	d7 03       	nop
80002996:	d7 03       	nop
80002998:	d7 03       	nop
8000299a:	d7 03       	nop
8000299c:	d7 03       	nop
8000299e:	d7 03       	nop
800029a0:	d7 03       	nop
800029a2:	d7 03       	nop
800029a4:	d7 03       	nop
800029a6:	d7 03       	nop
800029a8:	d7 03       	nop
800029aa:	d7 03       	nop
800029ac:	d7 03       	nop
800029ae:	d7 03       	nop
800029b0:	d7 03       	nop
800029b2:	d7 03       	nop
800029b4:	d7 03       	nop
800029b6:	d7 03       	nop
800029b8:	d7 03       	nop
800029ba:	d7 03       	nop
800029bc:	d7 03       	nop
800029be:	d7 03       	nop
800029c0:	d7 03       	nop
800029c2:	d7 03       	nop
800029c4:	d7 03       	nop
800029c6:	d7 03       	nop
800029c8:	d7 03       	nop
800029ca:	d7 03       	nop
800029cc:	d7 03       	nop
800029ce:	d7 03       	nop
800029d0:	d7 03       	nop
800029d2:	d7 03       	nop
800029d4:	d7 03       	nop
800029d6:	d7 03       	nop
800029d8:	d7 03       	nop
800029da:	d7 03       	nop
800029dc:	d7 03       	nop
800029de:	d7 03       	nop
800029e0:	d7 03       	nop
800029e2:	d7 03       	nop
800029e4:	d7 03       	nop
800029e6:	d7 03       	nop
800029e8:	d7 03       	nop
800029ea:	d7 03       	nop
800029ec:	d7 03       	nop
800029ee:	d7 03       	nop
800029f0:	d7 03       	nop
800029f2:	d7 03       	nop
800029f4:	d7 03       	nop
800029f6:	d7 03       	nop
800029f8:	d7 03       	nop
800029fa:	d7 03       	nop
800029fc:	d7 03       	nop
800029fe:	d7 03       	nop
